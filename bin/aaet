#!/usr/bin/env ruby
require_relative '../run.rb'
require 'commander/import'
require 'colorize'

program :version, '0.1.1'
program :description, 'Appium Automated Exploratory Tester'

command :crawler do |c|
  c.syntax = 'aaet  [options]'
  c.summary = 'Run Aaet Crawler'
  c.description = c.summary
  c.example 'description', "aaet crawler --seconds 300 --emulator avdName(s) --config path/to/configFile.txt"
  c.option '-s', '--seconds SECONDS', Integer, 'Set Runtime in Seconds: e.g. -s 300 (for 5 minutes)'
  c.option '-c', '--config CONFIG', String, 'Set config file location: e.g. -c myAppConfig.txt'
  c.option '-e', '--emulator EMULATOR', Array, 'Set emulator(s) AVD Name(s) to start: e.g. -e Nexus or Array as -e "NexusOne emulator1 emulator2"'
  c.option '-o', '--orientation ORIENTATION', String, 'Set devices orientation: e.g. -o landscape'
  c.option '-l', '--language LANGUAGE', Array, 'Set languages(s): e.g. -l "en" or -l "en de ar" Default: en'
  c.option '-u', '--uuid UUID', Array, 'Set Real Device UUID. e.g. --uuid IBZ5AQMBCY7DHASK or Array as -u "UUID1 UUID2"'
  #Boolean options. Only pass the argument (e.g. --debug) to set to true. Otherwise they are all false by default.
  c.option '--keepEmulatorAlive', "Keep emulator running after crawl. e.g. --keepEmulatorAlive"
  c.option '--bothOrientations', "If running in parallel with multiple devices. Tell Crawler to run both Orientations, if available. e.g --bothOrientations"
  c.option '--translate', 'Translate strings after job finish: e.g. --translate'
  c.option '--applitools', 'Run Applitools Tests. e.g --applitools'
  c.option '--updateBaseline', 'Update Applitools baseline images. e.g. --updateBaseline'
  c.option '--debug', 'Print debug output: e.g. --debug'
  c.option '--resetAppium', 'Reset Appium Session - Reinstall app on startup or restart. e.g. --resetAppium'
  c.option '--cloud', 'Crawl in cloud. e.g. --cloud. Default: false. Make sure your cloud settings are set in [cloud] and caps is pointed to a config/toml file'
  c.action do |args, options|
    options.default \
    mode: "crawler",
    emulator: nil,
    orientation: "PORTRAIT",
    language: ["en"],
    uuid: nil,
    keepEmulatorAlive: false,
    bothOrientations: false,
    translate: false,
    applitools: false,
    updateBaseline: false,
    debug: false,
    resetAppium: false,
    cloud: false

    if options.config.nil?
      puts "\nYou must supply a config TOML file... e.g. -c configs/app-debug.txt\n".red
      abort
    end

    if options.emulator.nil? and options.uuid.nil?
      puts "\nYou must supply a avdName/simulator or UUID... e.g. -e Nexus10 or -u UUID\n".red
      abort
    end

    if options.cloud
      options.uuid = nil
      options.emulator = nil
    end

    options.orientation = options.orientation.upcase

    crawler(options.default)
  end
end

command :monkey do |c|
  c.syntax = 'aaet  [options]'
  c.summary = 'Run Aaet Monkey'
  c.description = c.summary
  c.example 'description', "aaet monkey -c app-debug.txt -s 300 -e EM1 --trace"
  c.option '-s', '--seconds SECONDS', Integer, 'Set Runtime in Seconds: e.g. -s 300 (for 5 minutes)'
  c.option '-c', '--config CONFIG', String, 'Set config file location: e.g. -c myAppConfig.txt'
  c.option '-e', '--emulator EMULATOR', Array, 'Set emulator(s) AVD Name(s) to start: e.g. -e Nexus or Array as -e "NexusOne emulator1 emulator2"'
  c.option '-u', '--uuid UUID', Array, 'Set Device UUID. e.g. --uuid IBZ5AQMBCY7DHASK or Array as -u "IBZ5AQMBCY7DHASK skso9eosdlldfjs'
  c.option '-o', '--orientation ORIENTATION', String, 'Set devices orientation: e.g. -o landscape'
  #Boolean options. Only pass the argument (e.g. --debug) to set to true. Otherwise they are all false by default.
  c.option '--keepEmulatorAlive', "Keep emulator running after crawl. e.g. --keepEmulatorAlive"
  c.option '--bothOrientations', "If running in parallel with multiple devices. Tell Crawler to run both Orientations, if available. e.g --bothOrientations"
  c.option '--debug', 'Print debug output: e.g. --debug'
  c.option '--resetAppium', 'Reset Appium Session - Reinstall app on startup. e.g. --resetAppium'
  c.option '--cloud', 'Crawl in cloud. e.g. --cloud. Default: false. Make sure your cloud settings are set in [cloud] and caps is pointed to a config/toml file'
  c.action do |args, options|
    options.default \
    mode: "monkey",
    applitools: false,
    seconds: 300,
    debug: false,
    language: "en",
    orientation: "PORTRAIT",
    bothOrientations: false,
    resetAppium: false,
    cloud: false,
    emulator: nil,
    uuid: nil,
    keepEmulatorAlive: false

    if options.config.nil?
      puts "\nYou must supply a config TOML file... e.g. -c configs/app-debug.txt\n".red
      abort
    end

    if options.emulator.nil? and options.uuid.nil?
      puts "\nYou must supply a avdName/simulator or UUID... e.g. -e Nexus10 or -u UUID\n".red
      abort
    end

    if options.cloud
      options.uuid = nil
      options.emulator = nil
    end

    options.orientation = options.orientation.upcase

    monkey(options.default)
  end
end

command :replay do |c|
  c.syntax = 'aaet [options]'
  c.summary = 'Replay Last Aaet Run'
  c.description = c.summary
  c.example 'description', "aaet replay -c app-debug.txt -s 300 --trace"
  c.option '-s', '--seconds SECONDS', Integer, 'Set Max Runtime in Seconds: e.g. -s 300 (for 5 minutes). Crawler will run until the replay steps are finished or this value'
  c.option '-c', '--config CONFIG', String, 'Set config file location: e.g. -c myAppConfig.txt'
  #Boolean options. Only pass the argument (e.g. --debug) to set to true. Otherwise they are all false by default.
  c.option '--keepEmulatorAlive', "Keep emulator running after crawl. e.g. --keepEmulatorAlive"
  c.option '--debug', 'Print debug output: e.g. --debug'

  c.action do |args, options|
    options.default \
    mode: "replay",
    applitools: false,
    debug: false,
    keepEmulatorAlive: false

    if options.config.nil?
      puts "\nYou must supply a config TOML file... e.g. -c configs/app-debug.txt\n".red
      abort
    end

    replay(options.default)
  end
end